x-docker-common: &docker-common
  env_file: .env.staging
  image: pycon-etl
  build:
    context: .
    dockerfile: Dockerfile.test
  volumes:
    - ./sqlite:/opt/airflow/sqlite
    # you can comment out the following line if you don't have service-account.json
    - ./service-account.json:/opt/airflow/service-account.json
  environment:
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-api-server:8080/execution/'
  logging:
    driver: json-file
    options:
      max-size: 10m

services:
  airflow-api-server:
    <<: *docker-common
    container_name: airflow-api-server
    ports:
      - "8080:8080"
    command: api-server
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *docker-common
    container_name: airflow-dag-processor
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *docker-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *docker-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *docker-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -n "$${_AIRFLOW_DB_MIGRATE=}" ]]; then
            airflow db migrate || true
        fi
    restart: "no"
    environment:
      _AIRFLOW_DB_MIGRATE: 'false'
